generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  apiKeys ApiKey[]
  scripts Script[]
  voices  Voice[]
  stories Story[]
  images  Image[]
  cards   Card[]

  @@map("users")
}

model ApiKey {
  id         String       @id @default(uuid())
  api_key    String       @unique
  label      String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  expires_at DateTime?
  status     ApiKeyStatus

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("api_keys")
}

model Script {
  id         String     @id @default(uuid())
  content    String
  type       ScriptType @default(STORY)
  analysis   Json
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  voices  Voice[]
  stories Story[]
  images  Image[]
  cards   Card[]

  @@map("scripts")
}

model Voice {
  id         String        @id @default(uuid())
  tone       String
  status     RequestStatus @default(PENDING)
  audio_url  String?
  error      String?
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  script    Script @relation(fields: [script_id], references: [id])
  script_id String

  @@map("voiceovers")
}

model Image {
  id          String        @id @default(uuid())
  prompt      String
  style       Style
  image_url   String?
  error       String?
  status      RequestStatus @default(PENDING)
  scene_index Int?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  script    Script @relation(fields: [script_id], references: [id])
  script_id String

  @@map("images")
}

model Story {
  id         String        @id @default(uuid())
  style      Style
  video_url  String?
  image_urls Json
  status     RequestStatus @default(PENDING)
  error      String?
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  script    Script @relation(fields: [script_id], references: [id])
  script_id String

  @@map("stories")
}

model Card {
  id            String        @id @default(uuid())
  script_id     String
  script        Script        @relation(fields: [script_id], references: [id])
  color_palette Json
  font_style    String
  layout        String
  card_url      String?
  error         String?
  status        RequestStatus @default(PENDING)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@map("cards")
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum VoiceType {
  MALE
  FEMALE
  ACCENTED
}

enum Style {
  REALISTIC
  CARTOON
  MINIMALISTIC
}

enum ScriptType {
  STORY
  CARD
}
